Сервисы каждой сущности публикуют сообщения, касающиеся изменений в модели и сообщения, 
генерируемые логикой функционирования данной сущности.
Обменник - типа "topic".

В списке ниже представлены routing_key.
Сервис <сущность>_api_crud:
Принимает сообщения:
  1. <сущность>.api_crud_client.create (RPC)
  2. <сущность>.api_crud_client.read (RPC)
  3. <сущность>.api_crud_client.update
  4. <сущность>.api_crud_client.delete
Публикует сообщения:
  1. <сущность>.api_crud.create (RPC)
  2. <сущность>.api_crud.read (RPC)
  3. <сущность>.api_crud.update
  4. <сущность>.api_crud.delete

Сервис <сущность>_model_crud:
Принимает сообщения:
  1. <сущность>.api_crud.create (RPC)
  2. <сущность>.api_crud.read (RPC)
  3. <сущность>.api_crud.update
  4. <сущность>.api_crud.delete
Публикует сообщения:
  1. <сущность>.model.created.<id экземпляра сущности>
  2. <сущность>.model.may_update.<id экземпляра сущности> (RPC)
  3. <сущность>.model.updating.<id экземпляра сущности> (RPC)
  4. <сущность>.model.updated.<id экземпляра сущности>
  5. <сущность>.model.may_delete.<id экземпляра сущности> (RPC)
  6. <сущность>.model.deleting.<id экземпляра сущности> (RPC)
  7. <сущность>.model.deleted.<id экземпляра сущности>
  8. <дочерняя сущность>.model.may_delete.<id экземпляра дочерней сущности> (RPC)
  9. <дочерняя сущность>.model.deleting.<id экземпляра дочерней сущности> (RPC)
  
Сообщения 2, 3, 5, 6 предназначаются для сервиса <сущность>_app.

Update
Логика работы сервиса <сущность>_model_crud при получении запроса на обновление узла.
1) <сущность>_model_crud посылает сообщение <сущность>.model.may_update.<id экземпляра сущности>, предназначенное сервису
<сущность>_app. <сущность>_app должен ответить, можно обновлять узел или нет.
2) Если узел обновлять можно, то <сущность>_model_crud посылает сообщение <сущность>.model.updating.<id экземпляра сущности>,
предназначенное сервису <сущность>_app, чтобы сервис выполнил определённую работу перед обновлением узла, если это требуется.
3) После этого узел обновляется и посылается сообщение <сущность>.model.updated.<id экземпляра сущности>.

Delete
Логика работы сервиса <сущность>_model_crud при получении запроса на удаление узла.
1) <сущность>_model_crud посылает сообщение <сущность>.model.may_delete.<id экземпляра сущности>, предназначенное сервису
<сущность>_app. <сущность>_app должен ответить, можно удалять узел или нет.
2) <сущность>_model_crud ищет всех детей и каждой сущности, то есть сервису c именем <дочерняя сущность>_app 
   посылается сообщение <дочерняя сущность>.model.may_delete.<id экземпляра дочерней сущности>.
   Должен прийти ответ, можно удалять экземпляр сущности или нет.
3) Если все ответы = True, то по всем дочерним узлам, сервисам <дочерняя сущность>_app, рассылается сообщение 
   <дочерняя сущность>.model.deleting.<id экземпляра дочерней сущности> (RPC), 
   чтобы сервисы провели необходимую при удалении узлов работу, при этом сами узлы не удаляются, так как будут
   удалены вместе с родительским узлом.
4) Посылается сообщение <сущность>.model.deleting.<id экземпляра сущности> (RPC).
5) При получении ответа удаляется узел и посылается сообщение <сущность>.model.deleted.<id экземпляра сущности>, а также
   по всем дочерним узлам <дочерняя сущность>.model.deleted.<id экземпляра дочерней сущности>.


Сервис <сущность>_app_api:
Принимает сообщения:
  Любые сообщения вида <сущность>.app_api_client.*, принимаемые сообщения определяются логикой работы сервиса 
  и описаны в документации.
Публикует сообщения:
  Любые сообщения вида <сущность>.app_api.*

Сервис <сущность>_app:
Принимает сообщения:
  1. <сущность>.model.created.<id экземпляра сущности>
  2. <сущность>.model.may_update.<id экземпляра сущности> (RPC)
  3. <сущность>.model.updating.<id экземпляра сущности> (RPC)
  4. <сущность>.model.may_delete.<id экземпляра сущности> (RPC)
  5. <сущность>.model.deleting.<id экземпляра сущности> (RPC)
  6. Любые сообщения вида <сущность>.app_api.*
Публикует сообщения:
  Любые сообщения вида <сущность>.app.*
  Публикуемые сообщения описываются в документации.

Где "сущность" - "своя" сущность, а также любые другие.
Например, сервис <dataStorages>_app принимает подобные сообщения для сущностей: dataStorages, tags, alerts.
Также сервис принимает любые другие сообщения от других сервисов, всё зависит от логики приложения.
