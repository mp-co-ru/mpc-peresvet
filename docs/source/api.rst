API Платформы Пересвет
======================

Правила API
-----------

.. warning:: Внимание!
   При создании любых сущностей (тэги, объекты, тревоги и т.д.) в их именах
   допустимы: буквы (латинские, русские), цифры, пробел, минус,
   символ прямого слэша /.

Есть несколько базовых правил, на которых основывается API платформы:

#. Имена атрибутов в json-объектах, названия запросов придерживаются
   правил camelCase.

   Пример:

   .. code-block:: json

      {
         "parentObjectId": "...",
         "tagName": "..."
      }

#. Тело post-запроса к платформе содержит только один json-объект.
   Массивы данных передаются внутри этого объекта.
#. Ответ на post-запрос также содержит только один json-объект.
#. В json-объекте ответа на post-запрос есть ключ **error**, значение
   которого - также json-объект

   .. code-block:: json

      {
        "error": {
            "id": 1,
            "message": "Some error message",
            "traceback": "some info"
        }
      }

   Если код ошибки = 0, то ключи **message** и **traceback** отсутствуют.
#. Каждая сущность в Платформе имеет свою группу команд.
   Каждая такая группа реализуется в соответствующем модуле.

   Ниже - пример именования запросов и методов в Платформе.

   http запросы:

   .. code-block:: rest

      http://<server>:<port>/smt/<block name>/<command>

   Тело запроса преобразуется в json-объект методом ``do_POST``.
   Json объект передаётся в ``<block name><command>`` функцию из
   ``smt<block name>`` модуля.

   К примеру, есть группа команд для работы с тэгами.
   Это: **add**, **delete**, **addDataGetMethod** и так далее.
   Все команды, относящиеся к тэгам реализованы в модуле smtTags.py.

   Если мы хотим создать тэг, мы делаем вызов:

   .. code-block:: rest

      http://localhost/smt/tags/add

   ``smtPlatform.do_POST`` преобразовывает запрос в json и передаёт его в
   функцию ``tagsAdd`` в модуле ``smtTags``.

#. Ключ ``id`` в теле запроса обозначает идентификатор той сущности, из чьей
   группы используется команда.

   Например, для получения id хранилища данных тэга мы используем команду

   .. code-block:: rest

      http://localhost/smt/tags/getDataStorageId

   ...и посылаем json вида

   .. code-block:: json

      {
        "id": "someTagId"
      }

   В этом json'е ``id`` - идентификатор тэга.

   Если же мы вызываем команду из группы ``objects``, то ключ ``id`` будет
   идентификатором объекта.

   При вызове команды из группы ``base``, значение ключа ``id`` может быть
   идентификатором любого узла в иерархии.

#. По возможности все команды платформы работают с массивами данных.
   См. документацию на каждую команду.

#. В связи с использованием ldap-сервера для хранения иерархий
   имена всех сущностей представлены в виде атрибута ``cn``.

#. У каждого узла в иерархии присутствует атрибут ``uniqueIdentifier``.
   Это специальный неизменяемы атрибут, содержащий уникальный идентификатор узла.
   Платформа сама присваивает значение этому атрибуту при создании нового узла.
   При перемещении узла по иерархии этот атрибут сохраняется без изменений.

Модули
------

.. toctree::
   :maxdepth: 6

   Тревоги<alerts>
   Теги<tags>
   Обьекты<objects>
   Коннекторы<connectors>
   Хранилища данных<dataStorages_api_doc>
